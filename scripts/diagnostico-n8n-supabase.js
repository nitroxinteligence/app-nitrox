/**
 * Script de diagn√≥stico para problemas de sincroniza√ß√£o entre N8N e Supabase
 * 
 * Este script verifica:
 * 1. Conex√£o com o Supabase
 * 2. Estrutura da tabela openai_usage
 * 3. Teste de inser√ß√£o de um registro
 * 4. Valida√ß√£o do fluxo completo
 * 
 * Como usar:
 * 1. Copie para o editor de c√≥digo no N8N
 * 2. Configure vari√°veis de ambiente no N8N (SUPABASE_URL, SUPABASE_SERVICE_KEY)
 * 3. Execute o script
 * 4. Analise os resultados
 */

// Configura√ß√£o - obtenha do ambiente N8N ou substitua diretamente aqui
const SUPABASE_URL = process.env.SUPABASE_URL || $env.SUPABASE_URL;
const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_KEY || $env.SUPABASE_SERVICE_KEY;

async function diagnosticarConexao() {
  console.log('üîç INICIANDO DIAGN√ìSTICO DE CONEX√ÉO N8N-SUPABASE');
  console.log('================================================');

  // 1. Verificar configura√ß√£o
  console.log('\n1. VERIFICANDO CONFIGURA√á√ÉO:');
  if (!SUPABASE_URL) {
    console.error('‚ùå ERRO: SUPABASE_URL n√£o est√° definido');
    return { success: false, error: 'SUPABASE_URL n√£o configurado' };
  }
  console.log(`‚úÖ SUPABASE_URL configurado: ${SUPABASE_URL.substring(0, 20)}...`);
  
  if (!SUPABASE_SERVICE_KEY) {
    console.error('‚ùå ERRO: SUPABASE_SERVICE_KEY n√£o est√° definido');
    return { success: false, error: 'SUPABASE_SERVICE_KEY n√£o configurado' };
  }
  console.log(`‚úÖ SUPABASE_SERVICE_KEY configurado: ${SUPABASE_SERVICE_KEY.substring(0, 10)}...`);

  // 2. Verificar conex√£o com Supabase
  console.log('\n2. TESTANDO CONEX√ÉO COM SUPABASE:');
  try {
    const response = await fetch(`${SUPABASE_URL}/rest/v1/`, {
      method: 'GET',
      headers: {
        'apikey': SUPABASE_SERVICE_KEY,
        'Authorization': `Bearer ${SUPABASE_SERVICE_KEY}`
      }
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error(`‚ùå ERRO: Falha na conex√£o com Supabase: ${response.status} ${response.statusText}`);
      console.error(`   Detalhes: ${errorText}`);
      return { success: false, error: `Falha na conex√£o: ${errorText}` };
    }

    console.log(`‚úÖ Conex√£o estabelecida com sucesso: Status ${response.status}`);
  } catch (error) {
    console.error(`‚ùå ERRO: Exce√ß√£o ao conectar com Supabase: ${error.message}`);
    return { success: false, error: error.message };
  }

  // 3. Verificar estrutura da tabela openai_usage
  console.log('\n3. VERIFICANDO ESTRUTURA DA TABELA:');
  try {
    // Tentar obter estrutura da tabela via fun√ß√£o RPC
    const columnsResponse = await fetch(`${SUPABASE_URL}/rest/v1/rpc/get_table_columns`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'apikey': SUPABASE_SERVICE_KEY,
        'Authorization': `Bearer ${SUPABASE_SERVICE_KEY}`
      },
      body: JSON.stringify({ table_name: 'openai_usage' })
    });

    if (!columnsResponse.ok) {
      console.warn(`‚ö†Ô∏è Aviso: N√£o foi poss√≠vel obter estrutura via RPC: ${columnsResponse.status}`);
      console.log('   Tentando m√©todo alternativo...');
      
      // M√©todo alternativo: obter um registro existente
      const sampleResponse = await fetch(`${SUPABASE_URL}/rest/v1/openai_usage?limit=1`, {
        method: 'GET',
        headers: {
          'apikey': SUPABASE_SERVICE_KEY,
          'Authorization': `Bearer ${SUPABASE_SERVICE_KEY}`
        }
      });
      
      if (!sampleResponse.ok) {
        console.error(`‚ùå ERRO: N√£o foi poss√≠vel acessar a tabela openai_usage: ${sampleResponse.status}`);
        return { success: false, error: 'Falha ao acessar tabela openai_usage' };
      }
      
      const sampleData = await sampleResponse.json();
      if (sampleData && sampleData.length > 0) {
        console.log('‚úÖ Estrutura da tabela (baseada em amostra):');
        const sample = sampleData[0];
        Object.keys(sample).forEach(key => {
          console.log(`   - ${key}: ${typeof sample[key]}`);
        });
      } else {
        console.warn('‚ö†Ô∏è Aviso: Tabela parece vazia, n√£o foi poss√≠vel inferir estrutura');
      }
    } else {
      const columns = await columnsResponse.json();
      console.log('‚úÖ Estrutura da tabela:');
      columns.forEach(col => {
        console.log(`   - ${col.column_name}: ${col.data_type}${col.is_nullable === 'NO' ? ' (NOT NULL)' : ''}`);
      });
    }
  } catch (error) {
    console.error(`‚ùå ERRO: Falha ao verificar estrutura da tabela: ${error.message}`);
  }

  // 4. Testar inser√ß√£o de registro
  console.log('\n4. TESTANDO INSER√á√ÉO DE REGISTRO:');
  try {
    // Criar um registro de teste
    const testRecord = {
      timestamp: new Date().toISOString(),
      workflow_id: 'diagnostico-test',
      workflow_name: 'Diagn√≥stico N8N-Supabase',
      model: 'gpt-4o', // Campo com m min√∫sculo
      "Model": 'gpt-4o', // Campo com M mai√∫sculo para compatibilidade
      endpoint: 'chat',
      prompt_tokens: 10,
      completion_tokens: 20,
      total_tokens: 30,
      estimated_cost: 0.0001,
      user_id: null,
      request_id: `test_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`,
      tags: ['agent', 'diagnostico', 'test'],
      metadata: {
        source: 'diagnostico',
        test_date: new Date().toISOString(),
        test_type: 'sync_validation'
      }
    };

    console.log('üìù Tentando inserir registro de teste:');
    console.log(JSON.stringify(testRecord, null, 2));

    const insertResponse = await fetch(`${SUPABASE_URL}/rest/v1/openai_usage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'apikey': SUPABASE_SERVICE_KEY,
        'Authorization': `Bearer ${SUPABASE_SERVICE_KEY}`,
        'Prefer': 'return=representation'
      },
      body: JSON.stringify(testRecord)
    });

    if (!insertResponse.ok) {
      const errorText = await insertResponse.text();
      console.error(`‚ùå ERRO: Falha ao inserir registro: ${insertResponse.status} ${insertResponse.statusText}`);
      console.error(`   Detalhes: ${errorText}`);
      
      // Tentar analisar o erro para identificar campos problem√°ticos
      try {
        const errorData = JSON.parse(errorText);
        if (errorData.message && errorData.details) {
          console.error(`   Mensagem: ${errorData.message}`);
          console.error(`   Detalhes: ${errorData.details}`);
        }
      } catch (e) {
        // Ignorar erro de parsing
      }
      
      return { 
        success: false, 
        error: `Falha na inser√ß√£o: ${errorText}`,
        record: testRecord
      };
    }

    const insertResult = await insertResponse.json();
    console.log(`‚úÖ Registro inserido com sucesso!`);
    if (insertResult && insertResult.length > 0) {
      console.log(`   ID do registro: ${insertResult[0].id || 'N/A'}`);
    }

    // 5. Verificar consist√™ncia da fun√ß√£o de agrega√ß√£o
    console.log('\n5. VERIFICANDO FUN√á√ÉO DE AGREGA√á√ÉO:');
    try {
      const aggResponse = await fetch(`${SUPABASE_URL}/rest/v1/rpc/update_openai_daily_summary`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'apikey': SUPABASE_SERVICE_KEY,
          'Authorization': `Bearer ${SUPABASE_SERVICE_KEY}`
        }
      });
      
      if (!aggResponse.ok) {
        const errorText = await aggResponse.text();
        console.warn(`‚ö†Ô∏è Aviso: N√£o foi poss√≠vel executar fun√ß√£o de agrega√ß√£o: ${errorText}`);
      } else {
        console.log('‚úÖ Fun√ß√£o de agrega√ß√£o executada com sucesso!');
      }
    } catch (error) {
      console.warn(`‚ö†Ô∏è Aviso: Erro ao executar fun√ß√£o de agrega√ß√£o: ${error.message}`);
    }

  } catch (error) {
    console.error(`‚ùå ERRO: Exce√ß√£o ao testar inser√ß√£o: ${error.message}`);
    return { success: false, error: error.message };
  }

  // 6. Resumo do diagn√≥stico
  console.log('\n6. RESUMO DO DIAGN√ìSTICO:');
  console.log('‚úÖ Conex√£o com Supabase estabelecida');
  console.log('‚úÖ Estrutura da tabela verificada');
  console.log('‚úÖ Inser√ß√£o de registro de teste conclu√≠da');
  console.log('‚úÖ Fun√ß√£o de agrega√ß√£o testada');
  console.log('\nüéØ DIAGN√ìSTICO COMPLETO: Nenhum problema cr√≠tico identificado');
  console.log('Verifique os registros de log para poss√≠veis avisos ou erros secund√°rios.');
  
  return { 
    success: true, 
    message: 'Diagn√≥stico conclu√≠do com sucesso. A conex√£o entre N8N e Supabase parece funcional.',
    timestamp: new Date().toISOString()
  };
}

// Execute o diagn√≥stico e retorne o resultado
return diagnosticarConexao(); 